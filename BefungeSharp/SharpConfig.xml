<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpConfig</name>
    </assembly>
    <members>
        <member name="T:SharpConfig.Comment">
            <summary>
            Represents a comment in a configuration.
            </summary>
        </member>
        <member name="M:SharpConfig.Comment.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpConfig.Comment"/> class.
            </summary>
            <param name="value"> The string value of the comment.</param>
            <param name="symbol">The delimiting symbol of the comment.</param>
        </member>
        <member name="M:SharpConfig.Comment.ToString">
             <summary>
             Returns the fully qualified type name of this instance.
             </summary>
            
             <returns>
             A <see cref="T:System.String" /> containing a fully qualified type name.
             </returns>
        </member>
        <member name="P:SharpConfig.Comment.Value">
            <summary>
            Gets or sets the value of the comment.
            </summary>
        </member>
        <member name="P:SharpConfig.Comment.Symbol">
            <summary>
            Gets or sets the delimiting symbol of the comment.
            </summary>
        </member>
        <member name="T:SharpConfig.Configuration">
            <summary>
            Represents a configuration.
            Configurations contain one or multiple sections
            that in turn can contain one or multiple settings.
            The <see cref="T:SharpConfig.Configuration"/> class is designed
            to work with classic configuration formats such as
            .ini and .cfg, but is not limited to these.
            </summary>
        </member>
        <member name="M:SharpConfig.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpConfig.Configuration"/> class.
            </summary>
        </member>
        <member name="M:SharpConfig.Configuration.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the configuration.
            </summary>
        </member>
        <member name="M:SharpConfig.Configuration.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the configuration.
            </summary>
        </member>
        <member name="M:SharpConfig.Configuration.Add(SharpConfig.Section)">
            <summary>
            Adds a section to the configuration.
            </summary>
            <param name="section">The section to add.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Clear">
            <summary>
            Clears the configuration of all sections.
            </summary>
        </member>
        <member name="M:SharpConfig.Configuration.Contains(SharpConfig.Section)">
            <summary>
            Determines whether a specified section is contained in the configuration.
            </summary>
            <param name="section">The section to check for containment.</param>
            <returns>True if the section is contained in the configuration; false otherwise.</returns>
        </member>
        <member name="M:SharpConfig.Configuration.Contains(System.String)">
            <summary>
            Determines whether a specifically named setting is contained in the section.
            </summary>
            <param name="sectionName">The name of the section.</param>
            <returns>True if the setting is contained in the section; false otherwise.</returns>
        </member>
        <member name="M:SharpConfig.Configuration.Remove(System.String)">
            <summary>
            Removes a section from this section by its name.
            </summary>
            <param name="sectionName">The case-sensitive name of the section to remove.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Remove(SharpConfig.Section)">
            <summary>
            Removes a section from the configuration.
            </summary>
            <param name="section">The section to remove.</param>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromFile(System.String)">
             <summary>
             Loads a configuration from a file auto-detecting the encoding and
             using the default parsing settings.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromFile(System.String,System.Text.Encoding)">
             <summary>
             Loads a configuration from a file.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="encoding">The encoding applied to the contents of the file. Specify null to auto-detect the encoding.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromStream(System.IO.Stream)">
             <summary>
             Loads a configuration from a text stream auto-detecting the encoding and
             using the default parsing settings.
             </summary>
            
             <param name="stream">The text stream to load the configuration from.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromStream(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Loads a configuration from a text stream.
             </summary>
            
             <param name="stream">   The text stream to load the configuration from.</param>
             <param name="encoding"> The encoding applied to the contents of the stream. Specify null to auto-detect the encoding.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromString(System.String)">
             <summary>
             Loads a configuration from text (source code).
             </summary>
            
             <param name="source">The text (source code) of the configuration.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromText(System.String)">
             <summary>
             Loads a configuration from text (source code).
             </summary>
            
             <param name="source">The text (source code) of the configuration.</param>
            
             <returns>
             The loaded <see cref="T:SharpConfig.Configuration"/> object.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromBinaryFile(System.String)">
             <summary>
             Loads a configuration from a binary file using the <b>default</b> <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadBinary(System.String)">
             <summary>
             Loads a configuration from a binary file using the <b>default</b> <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromBinaryFile(System.String,System.IO.BinaryReader)">
             <summary>
             Loads a configuration from a binary file using a specific <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="reader">  The reader to use. Specify null to use the default <see cref="T:System.IO.BinaryReader"/>.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadBinary(System.String,System.IO.BinaryReader)">
             <summary>
             Loads a configuration from a binary file using a specific <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="reader">  The reader to use. Specify null to use the default <see cref="T:System.IO.BinaryReader"/>.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromBinaryStream(System.IO.Stream)">
             <summary>
             Loads a configuration from a binary stream, using the <b>default</b> <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="stream">The stream to load the configuration from.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadBinary(System.IO.Stream)">
             <summary>
             Loads a configuration from a binary stream, using the <b>default</b> <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="stream">The stream to load the configuration from.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadFromBinaryStream(System.IO.Stream,System.IO.BinaryReader)">
             <summary>
             Loads a configuration from a binary stream, using a specific <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="stream">The stream to load the configuration from.</param>
             <param name="reader">The reader to use. Specify null to use the default <see cref="T:System.IO.BinaryReader"/>.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.LoadBinary(System.IO.Stream,System.IO.BinaryReader)">
             <summary>
             Loads a configuration from a binary stream, using a specific <see cref="T:System.IO.BinaryReader"/>.
             </summary>
            
             <param name="stream">The stream to load the configuration from.</param>
             <param name="reader">The reader to use. Specify null to use the default <see cref="T:System.IO.BinaryReader"/>.</param>
            
             <returns>
             The loaded configuration.
             </returns>
        </member>
        <member name="M:SharpConfig.Configuration.SaveToFile(System.String)">
             <summary>
             Saves the configuration to a file using the default character encoding, which is UTF8.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Save(System.String)">
             <summary>
             Saves the configuration to a file using the default character encoding, which is UTF8.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveToFile(System.String,System.Text.Encoding)">
             <summary>
             Saves the configuration to a file.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="encoding">The character encoding to use. Specify null to use the default encoding, which is UTF8.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Save(System.String,System.Text.Encoding)">
             <summary>
             Saves the configuration to a file.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="encoding">The character encoding to use. Specify null to use the default encoding, which is UTF8.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveToStream(System.IO.Stream)">
             <summary>
             Saves the configuration to a stream using the default character encoding, which is UTF8.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Save(System.IO.Stream)">
             <summary>
             Saves the configuration to a stream using the default character encoding, which is UTF8.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveToStream(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Saves the configuration to a stream.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
             <param name="encoding">The character encoding to use. Specify null to use the default encoding, which is UTF8.</param>
        </member>
        <member name="M:SharpConfig.Configuration.Save(System.IO.Stream,System.Text.Encoding)">
             <summary>
             Saves the configuration to a stream.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
             <param name="encoding">The character encoding to use. Specify null to use the default encoding, which is UTF8.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinaryToFile(System.String)">
             <summary>
             Saves the configuration to a binary file, using the default <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinary(System.String)">
             <summary>
             Saves the configuration to a binary file, using the default <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinaryToFile(System.String,System.IO.BinaryWriter)">
             <summary>
             Saves the configuration to a binary file, using a specific <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="writer">  The writer to use. Specify null to use the default writer.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinary(System.String,System.IO.BinaryWriter)">
             <summary>
             Saves the configuration to a binary file, using a specific <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="filename">The location of the configuration file.</param>
             <param name="writer">  The writer to use. Specify null to use the default writer.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinaryToStream(System.IO.Stream)">
             <summary>
             Saves the configuration to a binary stream, using the default <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinary(System.IO.Stream)">
             <summary>
             Saves the configuration to a binary stream, using the default <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinaryToStream(System.IO.Stream,System.IO.BinaryWriter)">
             <summary>
             Saves the configuration to a binary file, using a specific <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
             <param name="writer">The writer to use. Specify null to use the default writer.</param>
        </member>
        <member name="M:SharpConfig.Configuration.SaveBinary(System.IO.Stream,System.IO.BinaryWriter)">
             <summary>
             Saves the configuration to a binary file, using a specific <see cref="T:System.IO.BinaryWriter"/>.
             </summary>
            
             <param name="stream">The stream to save the configuration to.</param>
             <param name="writer">The writer to use. Specify null to use the default writer.</param>
        </member>
        <member name="P:SharpConfig.Configuration.NumberFormat">
            <summary>
            Gets or sets the number format that is used for value conversion in Section.GetValue().
            The default value is <b>CultureInfo.InvariantCulture.NumberFormat</b>.
            </summary>
        </member>
        <member name="P:SharpConfig.Configuration.ValidCommentChars">
            <summary>
            Gets or sets the array that contains all comment delimiting characters.
            </summary>
        </member>
        <member name="P:SharpConfig.Configuration.IgnoreInlineComments">
            <summary>
            Gets or sets a value indicating whether inline-comments
            should be ignored when parsing a configuration.
            </summary>
        </member>
        <member name="P:SharpConfig.Configuration.IgnorePreComments">
            <summary>
            Gets or sets a value indicating whether pre-comments
            should be ignored when parsing a configuration.
            </summary>
        </member>
        <member name="P:SharpConfig.Configuration.SectionCount">
            <summary>
            Gets the number of sections that are in the configuration.
            </summary>
        </member>
        <member name="P:SharpConfig.Configuration.Item(System.Int32)">
            <summary>
            Gets or sets a section by index.
            </summary>
            <param name="index">The index of the section in the configuration.</param>
        </member>
        <member name="P:SharpConfig.Configuration.Item(System.String)">
             <summary>
             Gets or sets a section by its name.
             </summary>
            
             <param name="name">The name of the section.</param>
            
             <returns>
             The section if found, otherwise a new section with
             the specified name is created, added to the configuration and returned.
             </returns>
        </member>
        <member name="T:SharpConfig.ConfigurationElement">
            <summary>
            Represents the base class of all elements
            that exist in a <see cref="T:SharpConfig.Configuration"/>,
            for example sections and settings.
            </summary>
        </member>
        <member name="P:SharpConfig.ConfigurationElement.Name">
            <summary>
            Gets or sets the name of this element.
            </summary>
        </member>
        <member name="P:SharpConfig.ConfigurationElement.Comment">
            <summary>
            Gets or sets the comment of this element.
            </summary>
        </member>
        <member name="P:SharpConfig.ConfigurationElement.PreComments">
            <summary>
            Gets the list of comments above this element.
            </summary>
        </member>
        <member name="T:SharpConfig.ParserException">
            <summary>
            Represents an error that occurred during
            the configuration parsing stage.
            </summary>
        </member>
        <member name="T:SharpConfig.Setting">
            <summary>
            Represents a setting in a <see cref="T:SharpConfig.Configuration"/>.
            Settings are always stored in a <see cref="T:SharpConfig.Section"/>.
            </summary>
        </member>
        <member name="M:SharpConfig.Setting.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpConfig.Setting"/> class.
            </summary>
        </member>
        <member name="M:SharpConfig.Setting.#ctor(System.String,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:SharpConfig.Setting"/> class.
             </summary>
            
             <param name="name"> The name of the setting.</param>
             <param name="value">The value of the setting.</param>
        </member>
        <member name="M:SharpConfig.Setting.GetValueTyped``1">
             <summary>
             Gets this setting's value as a specific type.
             </summary>
            
             <typeparam name="T">The type of the object to retrieve.</typeparam>
        </member>
        <member name="M:SharpConfig.Setting.GetValueTyped(System.Type)">
             <summary>
             Gets this setting's value as a specific type.
             </summary>
            
             <param name="type">The type of the object to retrieve.</param>
        </member>
        <member name="M:SharpConfig.Setting.GetValueArray``1">
            <summary>
            Gets this setting's value as an array of a specific type.
            Note: this only works if the setting represents an array.
            </summary>
            <typeparam name="T">
                The type of elements in the array. All values in the array are going to be converted to objects of this type.
                If the conversion of an element fails, an exception is thrown.
            </typeparam>
            <returns></returns>
        </member>
        <member name="M:SharpConfig.Setting.GetValueArray(System.Type)">
            <summary>
            Gets this setting's value as an array of a specific type.
            Note: this only works if the setting represents an array.
            </summary>
            <param name="elementType">
                The type of elements in the array. All values in the array are going to be converted to objects of this type.
                If the conversion of an element fails, an exception is thrown.
            </param>
            <returns></returns>
        </member>
        <member name="M:SharpConfig.Setting.GetValue``1">
             <summary>
             Gets this setting's value as a specific type.
             </summary>
            
             <typeparam name="T">The type of the object to retrieve.</typeparam>
        </member>
        <member name="M:SharpConfig.Setting.GetValue(System.Type)">
             <summary>
             Gets this setting's value as a specific type.
             </summary>
            
             <param name="type">The type of the object to retrieve.</param>
        </member>
        <member name="M:SharpConfig.Setting.SetValue``1(``0)">
            <summary>
            Sets the value of this setting via an object.
            </summary>
            
            <param name="value">The value to set.</param>
        </member>
        <member name="M:SharpConfig.Setting.SetValue``1(``0[])">
            <summary>
            Sets the value of this setting via an array object.
            </summary>
            
            <param name="values">The values to set.</param>
        </member>
        <member name="M:SharpConfig.Setting.ToString">
            <summary>
            Gets a string that represents the setting, not including comments.
            </summary>
        </member>
        <member name="M:SharpConfig.Setting.ToString(System.Boolean)">
             <summary>
             Gets a string that represents the setting.
             </summary>
            
             <param name="includeComment">Specify true to include the comments in the string; false otherwise.</param>
        </member>
        <member name="P:SharpConfig.Setting.StringValue">
            <summary>
            Gets or sets the raw string value of this setting.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.IntValue">
            <summary>
            Gets or sets the value of this setting as an int.
            Note: this is a shortcut to GetValue and SetValue.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.FloatValue">
            <summary>
            Gets or sets the value of this setting as a float.
            Note: this is a shortcut to GetValue and SetValue.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.DoubleValue">
            <summary>
            Gets or sets the value of this setting as a double.
            Note: this is a shortcut to GetValue and SetValue.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.BoolValue">
            <summary>
            Gets or sets the value of this setting as a bool.
            Note: this is a shortcut to GetValue and SetValue.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.Value">
            <summary>
            Gets or sets the raw string value of this setting.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.IsArray">
            <summary>
            Gets a value indicating whether this setting is an array.
            </summary>
        </member>
        <member name="P:SharpConfig.Setting.ArraySize">
            <summary>
            Gets the size of the array that this setting represents.
            If this setting is not an array, -1 is returned.
            </summary>
        </member>
        <member name="T:SharpConfig.Section">
            <summary>
            Represents a group of <see cref="T:SharpConfig.Setting"/> objects.
            </summary>
        </member>
        <member name="M:SharpConfig.Section.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:SharpConfig.Section"/> class.
             </summary>
            
             <param name="name">The name of the section.</param>
        </member>
        <member name="M:SharpConfig.Section.FromObject``1(System.String,``0)">
            <summary>
            Creates a new instance of the <see cref="T:SharpConfig.Section"/> class that is
            based on an existing object.
            Important: the section is built only from the public getter properties
            of its type. When this method is called, all of those properties will be called
            once to obtain their values.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="obj"></param>
            <returns>The newly created section.</returns>
        </member>
        <member name="M:SharpConfig.Section.CreateObject``1">
            <summary>
            Creates an object of a specific type, and maps the settings
            in this section to the public properties of the object.
            </summary>
            
            <returns>The created object.</returns>
            
            <remarks>
            The specified type must have a public default constructor
            in order to be created.
            </remarks>
        </member>
        <member name="M:SharpConfig.Section.MapTo``1(``0)">
            <summary>
            Assigns the values of this section to an object's public properties.
            </summary>
            
            <param name="obj">The object that is modified based on the section.</param>
        </member>
        <member name="M:SharpConfig.Section.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the section.
            </summary>
        </member>
        <member name="M:SharpConfig.Section.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the section.
            </summary>
        </member>
        <member name="M:SharpConfig.Section.Add(SharpConfig.Setting)">
            <summary>
            Adds a setting to the section.
            </summary>
            <param name="setting">The setting to add.</param>
        </member>
        <member name="M:SharpConfig.Section.Clear">
            <summary>
            Clears the section of all settings.
            </summary>
        </member>
        <member name="M:SharpConfig.Section.Contains(SharpConfig.Setting)">
            <summary>
            Determines whether a specified setting is contained in the section.
            </summary>
            <param name="setting">The setting to check for containment.</param>
            <returns>True if the setting is contained in the section; false otherwise.</returns>
        </member>
        <member name="M:SharpConfig.Section.Contains(System.String)">
            <summary>
            Determines whether a specifically named setting is contained in the section.
            </summary>
            <param name="settingName">The name of the setting.</param>
            <returns>True if the setting is contained in the section; false otherwise.</returns>
        </member>
        <member name="M:SharpConfig.Section.Remove(System.String)">
            <summary>
            Removes a setting from this section by its name.
            </summary>
        </member>
        <member name="M:SharpConfig.Section.Remove(SharpConfig.Setting)">
            <summary>
            Removes a setting from the section.
            </summary>
            <param name="setting">The setting to remove.</param>
        </member>
        <member name="M:SharpConfig.Section.ToString">
             <summary>
             Returns a string that represents the current object.
             </summary>
            
             <returns>
             A string that represents the current object.
             </returns>
        </member>
        <member name="M:SharpConfig.Section.ToString(System.Boolean)">
             <summary>
             Convert this object into a string representation.
             </summary>
            
             <param name="includeComment">True to include, false to exclude the comment.</param>
            
             <returns>
             A string that represents the current object.
             </returns>
        </member>
        <member name="P:SharpConfig.Section.SettingCount">
            <summary>
            Gets the number of settings that are in the section.
            </summary>
        </member>
        <member name="P:SharpConfig.Section.Item(System.Int32)">
            <summary>
            Gets or sets a setting by index.
            </summary>
            <param name="index">The index of the setting in the section.</param>
        </member>
        <member name="P:SharpConfig.Section.Item(System.String)">
             <summary>
             Gets or sets a setting by its name.
             </summary>
            
             <param name="name">The name of the setting.</param>
            
             <returns>
             The setting if found, otherwise a new setting with
             the specified name is created, added to the section and returned.
             </returns>
        </member>
    </members>
</doc>
